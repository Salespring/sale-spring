# Production-like Docker Compose configuration
# Use this for testing production scenarios locally

version: '3.8'

services:
  # Application Container
  salespring-app:
    build:
      context: ..
      dockerfile: .dev/Dockerfile
    container_name: salespring_app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://salespring_user:salespring_password@postgres:5432/salespring
      REDIS_URL: redis://redis:6379
      SESSION_SECRET: production-secret-change-this
      PORT: 5000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - salespring_network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: salespring_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: salespring
      POSTGRES_USER: salespring_user
      POSTGRES_PASSWORD: salespring_password
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U salespring_user -d salespring"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - salespring_network

  # Redis for Session Storage
  redis:
    image: redis:7-alpine
    container_name: salespring_redis_prod
    restart: unless-stopped
    volumes:
      - redis_prod_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - salespring_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: salespring_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - salespring-app
    networks:
      - salespring_network

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  salespring_network:
    driver: bridge